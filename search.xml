<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>zookeeper集成seata</title>
      <link href="/2022/01/02/1/"/>
      <url>/2022/01/02/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为不喜欢nacos，太大很臃肿很多功能没必要，所以使用注册中心和配置中心均为zookeeper，然后基于zookeeper搭建了一个后端微服务脚手架。犯蠢忘了不同服务用的是不同数据库，但是自己测试的时候偷懒只用了一个数据库，导致分布式事务始终不生效，后来拆分数据库，测试正常。zookeeper推荐使用ZK UI导入配置文件。另在Seata 1.4.2版本中数据库中时间字段不能使用datetime类型否则会引起序列化错误。</p></blockquote><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-config --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zookeeper-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zookeeper-discovery --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zookeeper-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- seata连接zk 默认连接器，不剔除就狂报错 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.11&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- seata --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.seata&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2-编写consumer和provider的yml"><a href="#2-编写consumer和provider的yml" class="headerlink" title="2.编写consumer和provider的yml"></a>2.编写consumer和provider的yml</h4><h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: consumer</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev # 不指定这个参数在使用zookeeper作为配置中心会报错</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">      enabled: true  # true:开启zookeeper外部化配置, false:读取本地配置; 需要将config.watcher.enabled同时设置</span><br><span class="line">      connect-string: 127.0.0.1:2181</span><br><span class="line">      discovery:</span><br><span class="line">        register: true</span><br><span class="line">        enabled: true</span><br><span class="line">        root: /cloud-service</span><br><span class="line">      config:</span><br><span class="line">        enabled: true</span><br><span class="line">        root: /cloud-config</span><br><span class="line">        watcher:</span><br><span class="line">          enabled: true</span><br></pre></td></tr></table></figure><h5 id="提供者"><a href="#提供者" class="headerlink" title="提供者"></a>提供者</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: provider</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br><span class="line">  cloud:</span><br><span class="line">    zookeeper:</span><br><span class="line">      enabled: true  # true:开启zookeeper外部化配置, false:读取本地配置; 需要将config.watcher.enabled同时设置</span><br><span class="line">      connect-string: 127.0.0.1:2181</span><br><span class="line">      discovery:</span><br><span class="line">        register: true</span><br><span class="line">        enabled: true</span><br><span class="line">        root: /cloud-service</span><br><span class="line">      config:</span><br><span class="line">        enabled: true</span><br><span class="line">        root: /cloud-config</span><br><span class="line">        watcher:</span><br><span class="line">          enabled: true</span><br></pre></td></tr></table></figure><h4 id="3-服务消费者和提供者启动类"><a href="#3-服务消费者和提供者启动类" class="headerlink" title="3.服务消费者和提供者启动类"></a>3.服务消费者和提供者启动类</h4><p>启动类上面都新增@EnableDiscoveryClient注解</p><h4 id="4-将seata配置文件导入zookeeper配置中心"><a href="#4-将seata配置文件导入zookeeper配置中心" class="headerlink" title="4.将seata配置文件导入zookeeper配置中心"></a>4.将seata配置文件导入zookeeper配置中心</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">/seata=client.log.exceptionRate=100</span><br><span class="line">/seata=client.report.retry.count=5</span><br><span class="line">/seata=client.rm.asyncCommitBufferLimit=10000</span><br><span class="line">/seata=client.rm.lockRetryInternal=10</span><br><span class="line">/seata=client.rm.lockRetryPolicyBranchRollbackOnConflict=true</span><br><span class="line">/seata=client.rm.lockRetryTimes=30</span><br><span class="line">/seata=client.rm.reportRetryCount=5</span><br><span class="line">/seata=client.rm.reportSuccessEnable=false</span><br><span class="line">/seata=client.rm.sqlParserType=druid</span><br><span class="line">/seata=client.rm.tableMetaCheckEnable=false</span><br><span class="line">/seata=client.tm.commitRetryCount=5</span><br><span class="line">/seata=client.tm.rollbackRetryCount=5</span><br><span class="line">/seata=client.undo.dataValidation=true</span><br><span class="line">/seata=client.undo.logSerialization=jackson</span><br><span class="line">/seata=client.undo.logTable=undo_log</span><br><span class="line">/seata=metrics.enabled=false</span><br><span class="line">/seata=metrics.exporterList=prometheus</span><br><span class="line">/seata=metrics.exporterPrometheusPort=9898</span><br><span class="line">/seata=metrics.registryType=compact</span><br><span class="line">/seata=server.maxCommitRetryTimeout=-1</span><br><span class="line">/seata=server.maxRollbackRetryTimeout=-1</span><br><span class="line">/seata=server.recovery.asynCommittingRetryPeriod=1000</span><br><span class="line">/seata=server.recovery.committingRetryPeriod=1000</span><br><span class="line">/seata=server.recovery.rollbackingRetryPeriod=1000</span><br><span class="line">/seata=server.recovery.timeoutRetryPeriod=1000</span><br><span class="line">/seata=server.rollbackRetryTimeoutUnlockEnable=false</span><br><span class="line">/seata=server.undo.logDeletePeriod=86400000</span><br><span class="line">/seata=server.undo.logSaveDays=7</span><br><span class="line">/seata=service.default.grouplist=127.0.0.1:8091</span><br><span class="line">/seata=service.disableGlobalTransaction=false</span><br><span class="line">/seata=service.enableDegrade=false</span><br><span class="line">/seata=service.vgroupMapping.provider-service-group=default</span><br><span class="line">/seata=service.vgroupMapping.consumer-service-group=default</span><br><span class="line">/seata=store.db.branchTable=branch_table</span><br><span class="line">/seata=store.db.datasource=dbcp</span><br><span class="line">/seata=store.db.dbType=mysql</span><br><span class="line">/seata=store.db.driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">/seata=store.db.globalTable=global_table</span><br><span class="line">/seata=store.db.lockTable=lock_table</span><br><span class="line">/seata=store.db.maxConn=3</span><br><span class="line">/seata=store.db.minConn=1</span><br><span class="line">/seata=store.db.password=123456</span><br><span class="line">/seata=store.db.queryLimit=100</span><br><span class="line">/seata=store.db.url=jdbc:mysql://127.0.0.1:3306/cloud?useUnicode=true</span><br><span class="line">/seata=store.db.user=root</span><br><span class="line">/seata=store.file.dir=file_store/data</span><br><span class="line">/seata=store.file.fileWriteBufferCacheSize=16384</span><br><span class="line">/seata=store.file.flushDiskMode=async</span><br><span class="line">/seata=store.file.maxBranchSessionSize=16384</span><br><span class="line">/seata=store.file.maxGlobalSessionSize=512</span><br><span class="line">/seata=store.file.sessionReloadReadSize=100</span><br><span class="line">/seata=store.mode=db</span><br><span class="line">/seata=transport.compressor=none</span><br><span class="line">/seata=transport.enableClientBatchSendRequest=false</span><br><span class="line">/seata=transport.heartbeat=true</span><br><span class="line">/seata=transport.serialization=seata</span><br><span class="line">/seata=transport.server=NIO</span><br><span class="line">/seata=transport.shutdown.wait=3</span><br><span class="line">/seata=transport.threadFactory.bossThreadPrefix=NettyBoss</span><br><span class="line">/seata=transport.threadFactory.bossThreadSize=1</span><br><span class="line">/seata=transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector</span><br><span class="line">/seata=transport.threadFactory.clientSelectorThreadSize=1</span><br><span class="line">/seata=transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread</span><br><span class="line">/seata=transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler</span><br><span class="line">/seata=transport.threadFactory.shareBossWorker=false</span><br><span class="line">/seata=transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker</span><br><span class="line">/seata=transport.threadFactory.workerThreadSize=default</span><br><span class="line">/seata=transport.type=TCP</span><br></pre></td></tr></table></figure><p>每新加一个服务就要导入一个新的配置，xxx可以自定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/seata=service.vgroupMapping.xxx=default</span><br></pre></td></tr></table></figure><h4 id="5-新增seata的yml配置到provider和consumer"><a href="#5-新增seata的yml配置到provider和consumer" class="headerlink" title="5.新增seata的yml配置到provider和consumer"></a>5.新增seata的yml配置到provider和consumer</h4><h5 id="provider-yml"><a href="#provider-yml" class="headerlink" title="provider yml"></a>provider yml</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">seata:</span><br><span class="line">  enabled: true</span><br><span class="line">  application-id: provider-seata</span><br><span class="line">  tx-service-group: provider-service-group # 事务群组（可以每个应用独立取名，也可以使用相同的名字）这个群组名一定要和上面的seata=service.vgroupMapping中的xxx相等</span><br><span class="line">  client:</span><br><span class="line">    rm-report-success-enable: true</span><br><span class="line">    rm-table-meta-check-enable: false # 自动刷新缓存中的表结构（默认false）</span><br><span class="line">    rm-report-retry-count: 5 # 一阶段结果上报TC重试次数（默认5）</span><br><span class="line">    rm-async-commit-buffer-limit: 10000 # 异步提交缓存队列长度（默认10000）</span><br><span class="line">    rm:</span><br><span class="line">      lock:</span><br><span class="line">        lock-retry-internal: 10 # 校验或占用全局锁重试间隔（默认10ms）</span><br><span class="line">        lock-retry-times: 30 # 校验或占用全局锁重试次数（默认30）</span><br><span class="line">        lock-retry-policy-branch-rollback-on-conflict: true # 分支事务与其它全局回滚事务冲突时锁策略（优先释放本地锁让回滚成功）</span><br><span class="line">    tm-commit-retry-count: 3 # 一阶段全局提交结果上报TC重试次数（默认1次，建议大于1）</span><br><span class="line">    tm-rollback-retry-count: 3 # 一阶段全局回滚结果上报TC重试次数（默认1次，建议大于1）</span><br><span class="line">    undo:</span><br><span class="line">      undo-data-validation: true # 二阶段回滚镜像校验（默认true开启）</span><br><span class="line">      undo-log-serialization: jackson # undo序列化方式（默认jackson）</span><br><span class="line">      undo-log-table: undo_log  # 自定义undo表名（默认undo_log）</span><br><span class="line">    support:</span><br><span class="line">      spring:</span><br><span class="line">        datasource-autoproxy: true</span><br><span class="line">  service:</span><br><span class="line">    vgroup-mapping:</span><br><span class="line">      my_test_tx_group: default # TC 集群（必须与seata-server保持一致）</span><br><span class="line">    enable-degrade: false # 降级开关</span><br><span class="line">    disable-global-transaction: false # 禁用全局事务（默认false）</span><br><span class="line">    grouplist:</span><br><span class="line">      default: 127.0.0.1:8091</span><br><span class="line">  transport:</span><br><span class="line">    shutdown:</span><br><span class="line">      wait: 3</span><br><span class="line">    thread-factory:</span><br><span class="line">      boss-thread-prefix: NettyBoss</span><br><span class="line">      worker-thread-prefix: NettyServerNIOWorker</span><br><span class="line">      server-executor-thread-prefix: NettyServerBizHandler</span><br><span class="line">      share-boss-worker: false</span><br><span class="line">      client-selector-thread-prefix: NettyClientSelector</span><br><span class="line">      client-selector-thread-size: 1</span><br><span class="line">      client-worker-thread-prefix: NettyClientWorkerThread</span><br><span class="line">    type: TCP</span><br><span class="line">    server: NIO</span><br><span class="line">    heartbeat: true</span><br><span class="line">    serialization: seata</span><br><span class="line">    compressor: none</span><br><span class="line">    enable-client-batch-send-request: true # 客户端事务消息请求是否批量合并发送（默认true）</span><br><span class="line">  registry:</span><br><span class="line">    file:</span><br><span class="line">      name: file.conf</span><br><span class="line">    type: zk</span><br><span class="line">    zk:</span><br><span class="line">      server-addr: 127.0.0.1:2181</span><br><span class="line">  config:</span><br><span class="line">    file:</span><br><span class="line">      name: file.conf</span><br><span class="line">    type: zk</span><br><span class="line">    zk:</span><br><span class="line">      server-addr: 127.0.0.1:2181</span><br></pre></td></tr></table></figure><h5 id="consumer-yml"><a href="#consumer-yml" class="headerlink" title="consumer yml"></a>consumer yml</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">seata:</span><br><span class="line">  enabled: true</span><br><span class="line">  application-id: consumer-seata</span><br><span class="line">  tx-service-group: consumer-service-group # 事务群组（可以每个应用独立取名，也可以使用相同的名字）这个群组名一定要和上面的seata=service.vgroupMapping中的xxx相等</span><br><span class="line">  client:</span><br><span class="line">    rm-report-success-enable: true</span><br><span class="line">    rm-table-meta-check-enable: false # 自动刷新缓存中的表结构（默认false）</span><br><span class="line">    rm-report-retry-count: 5 # 一阶段结果上报TC重试次数（默认5）</span><br><span class="line">    rm-async-commit-buffer-limit: 10000 # 异步提交缓存队列长度（默认10000）</span><br><span class="line">    rm:</span><br><span class="line">      lock:</span><br><span class="line">        lock-retry-internal: 10 # 校验或占用全局锁重试间隔（默认10ms）</span><br><span class="line">        lock-retry-times: 30 # 校验或占用全局锁重试次数（默认30）</span><br><span class="line">        lock-retry-policy-branch-rollback-on-conflict: true # 分支事务与其它全局回滚事务冲突时锁策略（优先释放本地锁让回滚成功）</span><br><span class="line">    tm-commit-retry-count: 3 # 一阶段全局提交结果上报TC重试次数（默认1次，建议大于1）</span><br><span class="line">    tm-rollback-retry-count: 3 # 一阶段全局回滚结果上报TC重试次数（默认1次，建议大于1）</span><br><span class="line">    undo:</span><br><span class="line">      undo-data-validation: true # 二阶段回滚镜像校验（默认true开启）</span><br><span class="line">      undo-log-serialization: jackson # undo序列化方式（默认jackson）</span><br><span class="line">      undo-log-table: undo_log  # 自定义undo表名（默认undo_log）</span><br><span class="line">    support:</span><br><span class="line">      spring:</span><br><span class="line">        datasource-autoproxy: true</span><br><span class="line">  service:</span><br><span class="line">    vgroup-mapping:</span><br><span class="line">      my_test_tx_group: default # TC 集群（必须与seata-server保持一致）</span><br><span class="line">    enable-degrade: false # 降级开关</span><br><span class="line">    disable-global-transaction: false # 禁用全局事务（默认false）</span><br><span class="line">    grouplist:</span><br><span class="line">      default: 127.0.0.1:8091</span><br><span class="line">  transport:</span><br><span class="line">    shutdown:</span><br><span class="line">      wait: 3</span><br><span class="line">    thread-factory:</span><br><span class="line">      boss-thread-prefix: NettyBoss</span><br><span class="line">      worker-thread-prefix: NettyServerNIOWorker</span><br><span class="line">      server-executor-thread-prefix: NettyServerBizHandler</span><br><span class="line">      share-boss-worker: false</span><br><span class="line">      client-selector-thread-prefix: NettyClientSelector</span><br><span class="line">      client-selector-thread-size: 1</span><br><span class="line">      client-worker-thread-prefix: NettyClientWorkerThread</span><br><span class="line">    type: TCP</span><br><span class="line">    server: NIO</span><br><span class="line">    heartbeat: true</span><br><span class="line">    serialization: seata</span><br><span class="line">    compressor: none</span><br><span class="line">    enable-client-batch-send-request: true # 客户端事务消息请求是否批量合并发送（默认true）</span><br><span class="line">  registry:</span><br><span class="line">    file:</span><br><span class="line">      name: file.conf</span><br><span class="line">    type: zk</span><br><span class="line">    zk:</span><br><span class="line">      server-addr: 127.0.0.1:2181</span><br><span class="line">  config:</span><br><span class="line">    file:</span><br><span class="line">      name: file.conf</span><br><span class="line">    type: zk</span><br><span class="line">    zk:</span><br><span class="line">      server-addr: 127.0.0.1:2181</span><br></pre></td></tr></table></figure><h4 id="6-下载seata并修改配置文件"><a href="#6-下载seata并修改配置文件" class="headerlink" title="6.下载seata并修改配置文件"></a>6.下载seata并修改配置文件</h4><h5 id="修改file-conf"><a href="#修改file-conf" class="headerlink" title="修改file.conf"></a>修改file.conf</h5><p><img src="https://s4.ax1x.com/2022/01/07/7peqN4.png" alt="按照图中标识修改配置文件中的参数"></p><h5 id="修改registry-conf"><a href="#修改registry-conf" class="headerlink" title="修改registry.conf"></a>修改registry.conf</h5><p><img src="https://s4.ax1x.com/2022/01/07/7pebEF.png" alt="按照图中标识修改配置文件中的参数"></p><h4 id="7-各个子服务的数据库导入seata的sql"><a href="#7-各个子服务的数据库导入seata的sql" class="headerlink" title="7.各个子服务的数据库导入seata的sql"></a>7.各个子服务的数据库导入seata的sql</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> Navicat Premium Data Transfer</span><br><span class="line"></span><br><span class="line"> Source Server Type    : MySQL</span><br><span class="line"> Source Server Version : 80025</span><br><span class="line"></span><br><span class="line"> Target Server Type    : MySQL</span><br><span class="line"> Target Server Version : 80025</span><br><span class="line"> File Encoding         : 65001</span><br><span class="line"></span><br><span class="line"> Date: 02/01/2022 10:57:18</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for branch_table</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `branch_table`;</span><br><span class="line">CREATE TABLE `branch_table`  (</span><br><span class="line">  `branch_id` bigint NOT NULL,</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint NULL DEFAULT NULL,</span><br><span class="line">  `resource_group_id` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `resource_id` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `lock_key` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `branch_type` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint NULL DEFAULT NULL,</span><br><span class="line">  `client_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`branch_id`) USING BTREE,</span><br><span class="line">  INDEX `idx_xid`(`xid`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for global_table</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `global_table`;</span><br><span class="line">CREATE TABLE `global_table`  (</span><br><span class="line">  `xid` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  `transaction_id` bigint NULL DEFAULT NULL,</span><br><span class="line">  `status` tinyint NOT NULL,</span><br><span class="line">  `application_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_service_group` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `timeout` int NULL DEFAULT NULL,</span><br><span class="line">  `begin_time` bigint NULL DEFAULT NULL,</span><br><span class="line">  `application_data` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`xid`) USING BTREE,</span><br><span class="line">  INDEX `idx_gmt_modified_status`(`gmt_modified`, `status`) USING BTREE,</span><br><span class="line">  INDEX `idx_transaction_id`(`transaction_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for lock_table</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `lock_table`;</span><br><span class="line">CREATE TABLE `lock_table`  (</span><br><span class="line">  `row_key` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  `xid` varchar(96) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `transaction_id` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,</span><br><span class="line">  `branch_id` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL,</span><br><span class="line">  `resource_id` varchar(256) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `table_name` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `pk` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NULL DEFAULT NULL,</span><br><span class="line">  `gmt_modified` datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`row_key`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for undo_log</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `undo_log`;</span><br><span class="line">CREATE TABLE `undo_log`  (</span><br><span class="line">  `id` bigint NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `branch_id` bigint NOT NULL,</span><br><span class="line">  `xid` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `context` varchar(128) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `rollback_info` longblob NOT NULL,</span><br><span class="line">  `log_status` int NOT NULL,</span><br><span class="line">  `log_created` datetime NOT NULL,</span><br><span class="line">  `log_modified` datetime NOT NULL,</span><br><span class="line">  `ext` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  UNIQUE INDEX `ux_undo_log`(`xid`, `branch_id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB AUTO_INCREMENT = 30 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行seata-server.sh，在需要保持事务的Service加上@GlobalTransactional即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式事务 </tag>
            
            <tag> seata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写Linux中frp自启动脚本</title>
      <link href="/2021/12/01/1/"/>
      <url>/2021/12/01/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>家里有台闲置树莓派和轻量云的服务器顺手折腾一下</p></blockquote><p>设置服务名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /lib/systemd/system/frps.service</span><br></pre></td></tr></table></figure><p>写入下列代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps service</span><br><span class="line">#前置服务</span><br><span class="line">After=network.target syslog.target</span><br><span class="line">#后置服务</span><br><span class="line">Wants=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=always #当程序退出时，自动重启。</span><br><span class="line">#可以使用非root用户启动，此处我没有设置用户组则注释调</span><br><span class="line">#User=frp</span><br><span class="line">#Group=frp</span><br><span class="line">#启动服务的命令（此处写你的frps的实际安装目录）</span><br><span class="line">ExecStart=~/frp/frps -c ~/frp/frps.ini</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>刷新服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>服务自启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable frps</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart frps</span><br></pre></td></tr></table></figure><p>生成的软连接所在位置，一般在需要删除该自启动脚本时同时删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/systemd/system/multi-user.target.wants/frps.service</span><br><span class="line"></span><br><span class="line">/usr/lib/systemd/system/frps.service</span><br></pre></td></tr></table></figure><p>frp部署文档参考 👉 <a href="https://gofrp.org/docs/setup/">《安装frp》</a>- frp官方文档</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人技能网-待补充掌握程度</title>
      <link href="/2021/10/01/1/"/>
      <url>/2021/10/01/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>知识和知识之间是有联系的。</p></blockquote><h4 id="精通（待完善）"><a href="#精通（待完善）" class="headerlink" title="精通（待完善）"></a>精通（待完善）</h4><h4 id="熟练（待完善）"><a href="#熟练（待完善）" class="headerlink" title="熟练（待完善）"></a>熟练（待完善）</h4><h4 id="生疏（待完善）"><a href="#生疏（待完善）" class="headerlink" title="生疏（待完善）"></a>生疏（待完善）</h4><h4 id="了解（待完善）"><a href="#了解（待完善）" class="headerlink" title="了解（待完善）"></a>了解（待完善）</h4><h4 id="耳闻（待完善）"><a href="#耳闻（待完善）" class="headerlink" title="耳闻（待完善）"></a>耳闻（待完善）</h4><p><img src="https://z3.ax1x.com/2021/11/09/It1R3Q.png" alt="个人技能网"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务链路追踪SkyWalking</title>
      <link href="/2021/05/02/1/"/>
      <url>/2021/05/02/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>SkyWalking超级简单的微服务链路追踪框架</p></blockquote><h4 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1.下载安装包"></a>1.下载安装包</h4><p>SkyWalking<a href="https://skywalking.apache.org/downloads/">下载地址</a>，看了好多博客没一个描述清楚要下载哪个文件的，我自己也搞了半天，就是下图它兄弟俩都要下载，第一个是SkyWalking的服务，第二个是Java的扩展。</p><p><a href="https://imgtu.com/i/7eB7vV"><img src="https://s4.ax1x.com/2022/01/11/7eB7vV.md.png" alt="7eB7vV.md.png"></a></p><h4 id="2-修改启动参数"><a href="#2-修改启动参数" class="headerlink" title="2.修改启动参数"></a>2.修改启动参数</h4><p>首先解压<strong>SkyWalking Java Agent</strong>文件，找到<strong>skywalking-agent.jar</strong>，记下所在位置。然后修改idea中项目的启动配置，点击idea中的Edit Configurations…。点击需要加入链路追踪的服务，将下列参数如图所示分别加入VM options和Environment variables中。需要链路追踪能查看其他服务则按照上面所述依次添加启动参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:D:\\tools\\skywalking-agent\\skywalking-agent.jar</span><br><span class="line">SW_AGENT_NAME=cloud-auth;SW_AGENT_COLLECTOR_BACKEND_SERVICES=127.0.0.1:11800</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/7ecFNF"><img src="https://s4.ax1x.com/2022/01/11/7ecFNF.md.png" alt="7ecFNF.md.png"></a></p><p>然后解压打开<strong>SkyWalking APM</strong>的下载包，解压后进入文件夹下的bin目录，windows就执行startup.bat，linux就执行startup.sh。</p><p>最后启动各个微服务，在项目启动时当打印出来以下类似的日志时，则代表SkyWalking启动成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main AgentPackagePath : The beacon class location is jar:file:/D:/tools/skywalking-agent/skywalking-agent.jar!/org/apache/skywalking/apm/agent/core/boot/AgentPackagePath.class.</span><br><span class="line">main SnifferConfigInitializer : Config file found in D:\tools\skywalking-agent\config\agent.config.</span><br></pre></td></tr></table></figure><h4 id="3-查看启动效果"><a href="#3-查看启动效果" class="headerlink" title="3.查看启动效果"></a>3.查看启动效果</h4><p>SkyWalking中发现服务速度有些慢，稍等片刻后访问<strong>SkyWalking APM</strong>所在网络下的localhost:8080即可，页面效果如下图。</p><p><a href="https://imgtu.com/i/7eRjaV"><img src="https://s4.ax1x.com/2022/01/11/7eRjaV.md.png" alt="7eRjaV.md.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> 监控 </tag>
            
            <tag> SkyWalking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty应用以及源码（一）</title>
      <link href="/2021/01/02/1/"/>
      <url>/2021/01/02/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Netty是基于事件处理的高性能异步非阻塞网络框架，Zookeeper、Dubbo、RocketMQ底层都有Netty的影子，是网络编程的基石，需要熟练掌握</p></blockquote><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><h4 id="运行状态和异步同步"><a href="#运行状态和异步同步" class="headerlink" title="运行状态和异步同步"></a>运行状态和异步同步</h4><p>泡茶例子：</p><ul><li>同步：自己来烧水，自己来泡茶；</li><li>异步：自己烧水，然后走了换另一个人来泡茶；</li><li>阻塞：自己来烧水，自己需要站在原地等水烧开；</li><li>非阻塞：自己来烧水，自己可以在烧水途中做其他的事情；</li></ul><h4 id="网络IO"><a href="#网络IO" class="headerlink" title="网络IO"></a>网络IO</h4><ul><li>BIO：blocking I/O，阻塞性IO，需要当客户端发送请求之前则建立一个阻塞线程，去监听端口，待请求建立连接后继续阻塞，待客户端发送数据后再处理数据，适用于连接数固定且较小的项目中；</li><li>NIO：new I/O，使用单独的线程进行轮询是否有人建立连接，当建立了连接后才会丢给工作线程组，让线程组以块的模式来处理客户端数据，适用于连接数较大且连接时长较短的业务；</li><li>AIO：asynchronous I/O，完全异步的处理内核态的客户端数据，无需关心建立连接的细节，只需要根据系统通知进行事件处理即可，适用于连接数较大且连接时长较长的业务，用于系统调用比较多的场景，例如文件下载；</li></ul><h4 id="Reactor模式"><a href="#Reactor模式" class="headerlink" title="Reactor模式"></a>Reactor模式</h4><p>主要分为reactor和handler，reactor用来处理客户端连接，handler用来负责处理相关请求。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Netty </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库原理剖析和优化</title>
      <link href="/2020/05/02/1/"/>
      <url>/2020/05/02/1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据库是Web开发中必不可少的一环，需要加强基础知识的学习和总结项目中出现的问题。难点主要在索引和分布式事务上，由于本人项目过程中使用的数据库多为MySQL和MariaDB，所以以下内容所使用的数据库环境均为MySQL</p></blockquote><h2 id="数据库底层原理"><a href="#数据库底层原理" class="headerlink" title="数据库底层原理"></a>数据库底层原理</h2><h4 id="数据存储方式"><a href="#数据存储方式" class="headerlink" title="数据存储方式"></a>数据存储方式</h4><p>数据库中InnoDB和MyISAM存储引擎底层采用的存储方式为B+树，下面列举一下各个数据结构在数据存储时的演变过程。</p><ul><li>数组：查询快，插入速度慢；</li><li>链表：查询慢，插入速度快；</li><li>二叉树：查询速度快，插入速度快，但是极端情况会变成链表，会大幅降低查询效率，例如树的节点为1（根节点）、2、3、4、5、6时且一个节点只有两个子节点存储效率太差；</li><li>HASH表：将数据进行HASH运算，将运算完成后的结果存入地址，当存在碰撞时，将地址中的数据以链表的形式存储，缺点因为数据是计算后存储的，所以在范围查询时会效率低下，一般用于Memory引擎（一种完全存储在内存中的存储引擎）；</li><li>红黑树：查询速度快，插入速度慢，使用树旋转优化了二叉树的极端情况，也就是当存在1、2、3、4、5、6时，会将根节点优化为3，然后层级降低为三层，但是频繁旋转的时候会导致插入速度较慢；</li><li>B树：查询速度快，插入速度快，使用B树将子节点中的内容进行范围划分，且固定层级为三级。但是其中的数据都存在节点内，所以节点数据存储量太小，内存加载数据页时可容纳的数据也较少；</li><li>B+树：查询速度快，插入速度快，在具备B树所有优点同时还将数据存入子节点，相邻的叶子节点之间头尾相连，在数据被使用时那么它附近的数据也会被使用，可以预加载到内存中；</li></ul><p>在不同的存储引擎中B+树的存储方式也有所不同，InnoDB是采用聚集索引，MyISAM是采用非聚集索引。InnoDB有且必须要有一个聚集索引，一般是主键，没有主键则是第一个非空字段。</p><h4 id="主要构成"><a href="#主要构成" class="headerlink" title="主要构成"></a>主要构成</h4><p>一个完整的数据库服务具备模块如下：</p><ul><li>客户端<ul><li>数据库驱动</li><li>连接池</li></ul></li><li>服务端<ul><li> 连接器</li><li> 分析器</li><li> 优化器</li><li> 执行器</li><li> 存储引擎</li></ul></li></ul><blockquote><p>详细流程：数据库驱动通过连接池和服务器的连接器相连，当客户端接受到数据时，会将数据发送至服务端，服务端通过连接器接受客户端的数据，需要查询的数据是否在内存中，在内存中则返回，不在内存中则通过分析器分析，分析后交给优化器优化语句为AST tree（抽象语法树）后再交给执行器执行语句，从存储引擎中拉取数据。</p></blockquote><p><img src="https://z3.ax1x.com/2021/11/09/It3a5T.png" alt="数据库查询执行流程"></p><h4 id="数据库性能测试"><a href="#数据库性能测试" class="headerlink" title="数据库性能测试"></a>数据库性能测试</h4><p>在拿到数据库服务后，首先需要针对数据库进行压测，比较常用的压测工具有sysbench，它目前支持主流的Oracle、MySQL和PostgreSQL等数据库。</p><p>数据库性能测试指标主要有CPU、内存、磁盘读写率、网络吞吐率几个指标，需要对数据库读写请求成功数和事务完成数有一个大概的估算，在面对高并发的情况时能够合理的分析数据库的负载能力。</p><h2 id="数据库优化方式"><a href="#数据库优化方式" class="headerlink" title="数据库优化方式"></a>数据库优化方式</h2><h4 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h4><p>数据库的优化主要针对与查询中的慢SQL，可以通过打开配置文件中的记录慢SQL功能，针对慢SQL进行统计，找到慢SQL后使用explain关键字对SQL进行解析，结果中的关键字段分别是type（连接类型）、key（查询时使用的索引）、rows（估算出来的结果行数）、Extra（执行情况说明）。</p><p>其中需要额外注意type返回的结果，返回结果有ALL、index、range、 ref、eq_ref、const、system、NULL（指当前查询语句的性能从差到好，一般是认为range则是合格），row则是对结果数据条数的估算，该值是越小越好。Extra则是对查询结果的一个说明，其中using where则是说明该查询使用where进行筛选，using index则是触发了索引覆盖即当前查询内容只需要搜索一次索引树即可查到需要的数据，using index condition则是触发回表效率较低。</p><h4 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h4><p>最左匹配原则：越靠近where的条件，会越有限和索引匹配，当遇到了范围查询（&gt;、&lt;、between）或者like关键字时，会停止命中索引，实际操作中将索引一律靠近where条件即可；</p><p>索引选取规范：索引需要区分度较高，区分度的计算公式为（distinct cloumn）/count(cloumn)，比率越大则数据越少，一般推荐值为0.1以上；</p><p>回表：索引列中未查出select中所需要的字段需要二次进入聚集索引，依据主键查到数据源，相当于经历了两次B+树的搜索，效率很低下，需要避免；索引覆盖则是针对回表的优化，将查询中未命中的索引建立联合索引，避免依据索引无法查出完整数据导致的回表；</p><p>索引下推：MySQL5.6优化后查询索引树时会将所有的where判断索引条件都加上，查出结果集，如果不符合结果则直接放弃该条数据。而不是在之前版本中会查出符合第一个where条件的结果再依次使用where条件进行回表查询；</p><p>索引合并：MySQL5.1优化后查询可以使用多个索引一起使用；</p><p>join原理：<br>最基础的索引，等于双重for循环，将两张表的内存进行循环然后查询结果集。<br>当join中的on条件为索引时，会将最外层表的数据查询出来后使用索引去查内层表，顶多只需要三次IO查询索引树即可查到结果；<br>当join中的on条件不为索引时，会让任意一张表作为驱动表，然后将结果集存入join buffer，然后使用join buffer中的内容扫描另一张表；</p><p>join优化：<br>减少join中的条件数据，减少多次连接，按照机器性能新增join buffer大小；</p><h4 id="数据库存储优化"><a href="#数据库存储优化" class="headerlink" title="数据库存储优化"></a>数据库存储优化</h4><p>能用小字段尽量用小字段，varchar是变长的，随着字段存储内容的变多会变长。禁止在数据库内存储文件，如果有需要存储文件的业务时，需要把文件放入文件服务器中供系统访问和下载。</p><h2 id="数据库锁和分布式事务"><a href="#数据库锁和分布式事务" class="headerlink" title="数据库锁和分布式事务"></a>数据库锁和分布式事务</h2><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><p>数据库锁一般是读写锁，读锁后只能加读锁，不能加写锁。加了写锁后其他任何读锁、写锁都无法加入，使用了MVCC机制进行了优化；</p><p>InnoDB：有行锁和表锁，有索引则触发行锁，没有则是表锁；<br>MyISAM：只有表锁；</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事物的四大特征ACID，在InnoDB中：</p><blockquote><p>原子性（Atomicity）：使用undo log来实现；</p><p>一致性（Consistency）：使用A、I、D配合实现；</p><p>隔离性（Isolation）：使用数据库中的事务隔离级别来实现；</p><p>持久性（Durability）：使用redo log来实现；</p></blockquote><p>事务隔离级别</p><ul><li>读未提交：读到对方未提交的事务；</li><li>读已提交：两次读的内容不同，第二次读到的事务为已提交的内容，也叫不可重复读；</li><li>可重复读：两次读的内容都是一样的，无论第二次事务有没有提交，只要当前事务未提交，就只能读取当前事务的数据；</li><li>幻读：第一次只查询到一条数据但是第二次查询查到了另一个事务提交的数据；</li><li>串行化：事务之间互斥，只有第一个事务提交后后续事务才能依次执行。</li></ul><p>MVCC：mysql innodb存储引擎默认隔离级别是可重复读，mysql实现可重复读使用的是mvcc机制(多版本并发控制)。就是在读的时候都加上版本号，只有当其他事务提交后，才更新最新的版本号，实现原理是使用undo log。</p><p>分布式事务</p><ol><li><p>CAP定理：</p><ul><li><p>C - Consistency，一致性</p></li><li><p>A - Availability，可用性</p></li><li><p>P - Partition tolerance，分区容忍性</p></li></ul><p> CAP定理，由于分布式的存在，所以在三个特性中必须满足P，即分区容忍性，在不同的网络环境中的互相通讯的节点服务死亡后不会影响其他服务。而A和C不能共存，则衍生出来了AP、CP两种情况。</p><p> CP：服务和服务之间保证了高强度的一致性，如果有服务死亡则通过投票或选举等措施等待数据同步，服务会有部分时间不可用；</p><p> AP：服务和服务之间为了保证可以对外提供访问则会，不关注多台服务上的数据是否同步的情况；</p></li><li><p>XA规范：</p><ul><li>AP：appliaction 应用程序</li><li>TM：truncation manager 事务管理器</li><li>RM：resource manager 资源管理器</li><li>CRM：communication resource manager 通讯资源管理器</li></ul></li><li><p>解决方案</p><ul><li>2PC方案</li><li>3PC方案</li><li>TCC方案</li><li>本地消息表方案</li><li>最终一致性方案</li><li>最大努力通知方案</li></ul></li></ol><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><blockquote><p>分而治之，将大规模的数据按照某种规律进行划分，垂直分表应该在设计表的时候根据业务都划分完毕，所以架构中需要处理的分表主要为水平分表</p></blockquote><h4 id="相关实现"><a href="#相关实现" class="headerlink" title="相关实现"></a>相关实现</h4><p>mysql分区表语法 PARTITION BY RANGE，建议分区列为可阶段性拆分列，例如时间，年龄，类别之类，使用sharding jdbc进行分库分表</p><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h4 id="操作系统相关知识"><a href="#操作系统相关知识" class="headerlink" title="操作系统相关知识"></a>操作系统相关知识</h4><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><h4 id="Docker部署相关常见问题点"><a href="#Docker部署相关常见问题点" class="headerlink" title="Docker部署相关常见问题点"></a>Docker部署相关常见问题点</h4><ol><li>时区需要调整到上海</li><li>默认开启了大小写校验，可按需更改</li></ol><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><ol><li>navicat连接数据库需要把保持连接间隔降低到30s，默认时长为240s，会导致响应时间过长导致数据库连接被释放掉</li></ol><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><p>参考文献：<br><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">《MySQL索引原理及慢查询优化》</a>- 美团技术团队</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

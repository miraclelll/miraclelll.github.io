<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人技能网-待补充掌握程度</title>
      <link href="/2021/10/01/10/"/>
      <url>/2021/10/01/10/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上次听课时一位讲师说在个人成长过程中要不断地自己绘制自己的技能网，知识和知识之间是有联系的，做成图之后可以更好的梳理知识之间的共同点，并且以便以后复习自己所掌握的知识，笔者深以为然，所以今天也绘制了自己的技能网。</p></blockquote><h4 id="精通（待完善）"><a href="#精通（待完善）" class="headerlink" title="精通（待完善）"></a>精通（待完善）</h4><h4 id="熟练（待完善）"><a href="#熟练（待完善）" class="headerlink" title="熟练（待完善）"></a>熟练（待完善）</h4><h4 id="生疏（待完善）"><a href="#生疏（待完善）" class="headerlink" title="生疏（待完善）"></a>生疏（待完善）</h4><h4 id="了解（待完善）"><a href="#了解（待完善）" class="headerlink" title="了解（待完善）"></a>了解（待完善）</h4><h4 id="耳闻（待完善）"><a href="#耳闻（待完善）" class="headerlink" title="耳闻（待完善）"></a>耳闻（待完善）</h4><p><img src="https://pic.imgdb.cn/item/617a14f52ab3f51d91a38617.png" alt="个人技能网"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty应用以及源码（一）</title>
      <link href="/2021/01/02/ckvgdix54000150w28bmw2djp/"/>
      <url>/2021/01/02/ckvgdix54000150w28bmw2djp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Netty高性能网络编程框架，主要优点有NIO、零拷贝</p></blockquote><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Netty </tag>
            
            <tag> 后端 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库原理剖析和优化</title>
      <link href="/2020/05/02/ckvgdix56000350w2gj0o23jq/"/>
      <url>/2020/05/02/ckvgdix56000350w2gj0o23jq/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据库是Web开发中必不可少的一环，需要加强基础知识的学习和总结项目中出现的问题。难点主要在索引和分布式事务上，由于本人项目过程中使用的数据库多为MySQL和MariaDB，所以以下内容所使用的数据库环境均为MySQL</p></blockquote><h2 id="数据库底层原理"><a href="#数据库底层原理" class="headerlink" title="数据库底层原理"></a>数据库底层原理</h2><h4 id="数据存储方式"><a href="#数据存储方式" class="headerlink" title="数据存储方式"></a>数据存储方式</h4><p>数据库中InnoDB和MyISAM存储引擎底层采用的存储方式为B+树，下面列举一下各个数据结构在数据存储时的演变过程。</p><ul><li>数组：查询快，插入速度慢；</li><li>链表：查询慢，插入速度快；</li><li>二叉树：查询速度快，插入速度快，但是极端情况会变成链表，会大幅降低查询效率，例如树的节点为1（根节点）、2、3、4、5、6时且一个节点只有两个子节点存储效率太差；</li><li>HASH表：将数据进行HASH运算，将运算完成后的结果存入地址，当存在碰撞时，将地址中的数据以链表的形式存储，缺点因为数据是计算后存储的，所以在范围查询时会效率低下，一般用于Memory引擎（一种完全存储在内存中的存储引擎）；</li><li>红黑树：查询速度快，插入速度慢，使用树旋转优化了二叉树的极端情况，也就是当存在1、2、3、4、5、6时，会将根节点优化为3，然后层级降低为三层，但是频繁旋转的时候会导致插入速度较慢；</li><li>B树：查询速度快，插入速度快，使用B树将子节点中的内容进行范围划分，且固定层级为三级。但是其中的数据都存在节点内，所以节点数据存储量太小，内存加载数据页时可容纳的数据也较少；</li><li>B+树：查询速度快，插入速度快，在具备B树所有优点同时还将数据存入子节点，相邻的叶子节点之间头尾相连，在数据被使用时那么它附近的数据也会被使用，可以预加载到内存中；</li></ul><p>在不同的存储引擎中B+树的存储方式也有所不同，InnoDB是采用聚集索引，MyISAM是采用非聚集索引。InnoDB有且必须要有一个聚集索引，一般是主键，没有主键则是第一个非空字段。</p><h4 id="主要构成"><a href="#主要构成" class="headerlink" title="主要构成"></a>主要构成</h4><p>一个完整的数据库服务具备模块如下：</p><ul><li>客户端<ul><li>数据库驱动</li><li>连接池</li></ul></li><li>服务端<ul><li> 连接器</li><li> 分析器</li><li> 优化器</li><li> 执行器</li><li> 存储引擎</li></ul></li></ul><p>详细流程：数据库驱动通过连接池和服务器的连接器相连，当客户端接受到数据时，会将数据发送至服务端，服务端通过连接器接受客户端的数据，需要查询的数据是否在内存中，在内存中则返回，不在内存中则通过分析器分析，分析后交给优化器优化语句为AST tree（抽象语法树）后再交给执行器执行语句，从存储引擎中拉取数据。</p><p><img src="https://pic.imgdb.cn/item/617bbd402ab3f51d910a6d68.png" alt="数据库查询执行流程"></p><h4 id="数据库性能测试"><a href="#数据库性能测试" class="headerlink" title="数据库性能测试"></a>数据库性能测试</h4><p>在拿到数据库服务后，首先需要针对数据库进行压测，比较常用的压测工具有sysbench，它目前支持主流的Oracle、MySQL和PostgreSQL等数据库。</p><p>数据库性能测试指标主要有CPU、内存、磁盘读写率、网络吞吐率几个指标，需要对数据库读写请求成功数和事务完成数有一个大概的估算，在面对高并发的情况时能够合理的分析数据库的负载能力。</p><h2 id="数据库优化方式"><a href="#数据库优化方式" class="headerlink" title="数据库优化方式"></a>数据库优化方式</h2><h4 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h4><p>数据库的优化主要针对与查询中的慢SQL，可以通过打开配置文件中的记录慢SQL功能，针对慢SQL进行统计，找到慢SQL后使用explain关键字对SQL进行解析，结果中的关键字段分别是type（连接类型）、key（查询时使用的索引）、rows（估算出来的结果行数）、Extra（执行情况说明）。</p><p>其中需要额外注意type返回的结果，返回结果有ALL、index、range、 ref、eq_ref、const、system、NULL（指当前查询语句的性能从差到好，一般是认为range则是合格），row则是对结果数据条数的估算，该值是越小越好。Extra则是对查询结果的一个说明，其中using where则是说明该查询使用where进行筛选，using index则是触发了索引覆盖即当前查询内容只需要搜索一次索引树即可查到需要的数据，using index condition则是触发回表效率较低。</p><h4 id="数据库查询优化"><a href="#数据库查询优化" class="headerlink" title="数据库查询优化"></a>数据库查询优化</h4><p>最左匹配原则：越靠近where的条件，会越有限和索引匹配，当遇到了范围查询（&gt;、&lt;、between）或者like关键字时，会停止命中索引，实际操作中将索引一律靠近where条件即可；</p><p>索引选取规范：索引需要区分度较高，区分度的计算公式为（distinct cloumn）/count(cloumn)，比率越大则数据越少，一般推荐值为0.1以上；</p><p>回表：索引列中未查出select中所需要的字段需要二次进入聚集索引，依据主键查到数据源，相当于经历了两次B+树的搜索，效率很低下，需要避免；索引覆盖则是针对回表的优化，将查询中未命中的索引建立联合索引，避免依据索引无法查出完整数据导致的回表；</p><p>索引下推：MySQL5.6优化后查询索引树时会将所有的where判断索引条件都加上，查出结果集，如果不符合结果则直接放弃该条数据。而不是在之前版本中会查出符合第一个where条件的结果再依次使用where条件进行回表查询；</p><p>索引合并：MySQL5.1优化后查询可以使用多个索引一起使用；</p><p>join原理：<br>最基础的索引，等于双重for循环，将两张表的内存进行循环然后查询结果集。<br>当join中的on条件为索引时，会将最外层表的数据查询出来后使用索引去查内层表，顶多只需要三次IO查询索引树即可查到结果；<br>当join中的on条件不为索引时，会让任意一张表作为驱动表，然后将结果集存入join buffer，然后使用join buffer中的内容扫描另一张表；</p><p>join优化：<br>减少join中的条件数据，减少多次连接，按照机器性能新增join buffer大小；</p><h4 id="数据库存储优化"><a href="#数据库存储优化" class="headerlink" title="数据库存储优化"></a>数据库存储优化</h4><p>能用小字段尽量用小字段，varchar是变长的，随着字段存储内容的变多会变长。禁止在数据库内存储文件，如果有需要存储文件的业务时，需要把文件放入文件服务器中供系统访问和下载。</p><h2 id="数据库锁和分布式事务"><a href="#数据库锁和分布式事务" class="headerlink" title="数据库锁和分布式事务"></a>数据库锁和分布式事务</h2><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><p>数据库锁一般是读写锁，读锁后只能加读锁，不能加写锁。加了写锁后其他任何读锁、写锁都无法加入；</p><p>InnoDB：有行锁和表锁，有索引则触发行锁，没有则是表锁；<br>MyISAM：只有表锁；</p><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>事物的四大特征ACID，在InnoDB中：</p><ul><li><p>原子性（Atomicity）：使用undo log来实现；</p></li><li><p>一致性（Consistency）：使用A、I、D配合实现；</p></li><li><p>隔离性（Isolation）：使用数据库中的锁来实现；</p></li><li><p>持久性（Durability）：使用redo log来实现；</p></li></ul><p>分布式事务</p><ol><li><p>CAP定理：</p><ul><li><p>C - Consistency，一致性</p></li><li><p>A - Availability，可用性</p></li><li><p>P - Partition tolerance，分区可达性</p></li></ul><p> CAP定理，由于分布式的存在，所以在三个特性中必须满足P，即分区容忍性，在不同的网络环境中的互相通讯的节点服务死亡后不会影响其他服务。而A和C不能共存，则衍生出来了两种情况。</p><p> CP：服务和服务之间保证了高强度的一致性，如果有服务死亡则通过投票或选举等措施等待数据同步，服务会有部分时间不可用；</p><p> AP：服务和服务之间为了保证可以对外提供访问则会，不关注多台服务上的数据是否同步的情况；</p></li><li><p>事务类型</p></li></ol><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><h2 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>分而治之，将大规模的数据按照某种规律进行划分，垂直分表应该在设计表的时候根据业务都划分完毕，所以架构中需要处理的分表主要为水平分表</p><h4 id="相关实现"><a href="#相关实现" class="headerlink" title="相关实现"></a>相关实现</h4><p>mysql分区表语法 PARTITION BY RANGE，建议分区列为可阶段性拆分列，例如时间，年龄，类别之类，使用sharding jdbc进行分库分表</p><h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h4 id="操作系统相关知识"><a href="#操作系统相关知识" class="headerlink" title="操作系统相关知识"></a>操作系统相关知识</h4><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><h4 id="Docker部署相关常见问题点"><a href="#Docker部署相关常见问题点" class="headerlink" title="Docker部署相关常见问题点"></a>Docker部署相关常见问题点</h4><ol><li>时区需要调整到上海</li><li>默认开启了大小写校验，可按需更改</li></ol><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><ul><li><input disabled="" type="checkbox"> 待完成</li></ul><p>参考文献：<br><a href="https://tech.meituan.com/2014/06/30/mysql-index.html">《MySQL索引原理及慢查询优化》</a>- 美团技术团队</p>]]></content>
      
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
